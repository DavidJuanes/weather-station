buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE")
        classpath("com.bmuschko:gradle-docker-plugin:3.0.11")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'com.bmuschko.docker-remote-api'


// import task classes
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*


jar {
    baseName = 'gs-spring-boot'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // tag::jetty[]
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    // end::jetty[]
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    testCompile("junit:junit")

    // lombok
    compileOnly 'org.projectlombok:lombok:1.16.18'
}

docker {
    javaApplication {
        maintainer = 'David Gonzalez "david.gonzalez.juanes@gmail.com"'
    }
}

task createDBContainer(type: DockerCreateContainer) {
    targetImageId { 'mongo:latest' }
}

task startDBContainer(type: DockerStartContainer) {
    dependsOn createDBContainer
    targetContainerId { createDBContainer.getContainerId() }
}

task createMyAppContainer(type: DockerCreateContainer) {
    dependsOn dockerBuildImage, startDBContainer
    targetImageId { dockerBuildImage.getImageId() }
    portBindings = ['8080:8080']

    doFirst{ // doFirst required!
        links = [ "${startDBContainer.getContainerId()}:database" ] // `database` there will be host used by application to DB connect
    }
}

task startMyAppContainer(type: DockerStartContainer) {
    dependsOn createMyAppContainer
    targetContainerId { createMyAppContainer.getContainerId() }
}

task stopMyAppContainer(type: DockerStopContainer) {
    targetContainerId { createMyAppContainer.getContainerId() }
}

task functionalTestMyApp(type: Test) {
    dependsOn startMyAppContainer
    finalizedBy stopMyAppContainer
}
